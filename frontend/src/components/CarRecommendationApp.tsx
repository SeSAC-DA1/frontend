import React, { useState } from 'react';
import {
  Container,
  Box,
  Typography,
  Grid,
  Alert,
  Paper,
  Divider,
  Skeleton,
  Fade,
  Card,
  CardContent,
} from '@mui/material';
import GuidedInputPanel from './GuidedInputPanel';
import EnhancedHeader from './EnhancedHeader';
import EnhancedCarCard from './EnhancedCarCard';

// Types for API responses
interface CarRecommendation {
  car_id: number;
  make: string;
  model: string;
  year: number;
  price: number;
  fuel_type: string;
  category: string;
  fuel_efficiency?: number;
  safety_rating: number;
  description: string;
  recommendation_reason: string;
  score?: number;
}

interface RecommendationResponse {
  status: string;
  agent_response: string;
  ml_recommendations: CarRecommendation[];
  user_profile: any;
  message?: string;
}

interface FinanceOption {
  type: string;
  monthly_payment: number;
  total_cost: number;
  down_payment: number;
  description: string;
}

interface FinanceResponse {
  status: string;
  agent_response: string;
  car_details: any;
  finance_options: FinanceOption[];
  message?: string;
}

interface CarRecommendationAppProps {
  onStartChat: () => void;
}

const CarRecommendationApp: React.FC<CarRecommendationAppProps> = ({ onStartChat }) => {
  const [recommendations, setRecommendations] = useState<CarRecommendation[]>([]);
  const [agentResponse, setAgentResponse] = useState('');
  const [financeInfo, setFinanceInfo] = useState<FinanceResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [financeLoading, setFinanceLoading] = useState(false);
  const [error, setError] = useState('');
  const [selectedCar, setSelectedCar] = useState<CarRecommendation | null>(null);
  const [compareList, setCompareList] = useState<CarRecommendation[]>([]);
  const [agentLoading, setAgentLoading] = useState(false);

  // Get backend URL - backend runs on port 8000, frontend on 5000
  const API_BASE = window.location.protocol + '//' + window.location.hostname + ':8000';

  const handleRecommendation = async (inputData: {
    message: string;
    budget: number;
    filters: any;
  }) => {
    if (!inputData.message.trim() && !Object.values(inputData.filters).some(v => v)) {
      setError('Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÍ±∞ÎÇò Ï°∞Í±¥ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setLoading(true);
    setAgentLoading(true);
    setError('');
    setRecommendations([]);
    setAgentResponse('');
    setFinanceInfo(null);
    setSelectedCar(null);

    try {
      const response = await fetch(`${API_BASE}/api/recommend`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: inputData.message,
          user_id: 'user_' + Date.now(),
          budget: inputData.budget,
          filters: inputData.filters,
        }),
      });

      if (!response.ok) {
        throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${response.status}`);
      }

      const data: RecommendationResponse = await response.json();

      if (data.status === 'error') {
        throw new Error(data.message || 'Ï∂îÏ≤úÏùÑ Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      }

      // ÏóêÏù¥Ï†ÑÌä∏ ÏùëÎãµ Î®ºÏ†Ä ÌëúÏãú
      setAgentResponse(data.agent_response || '');
      setAgentLoading(false);
      
      // Ï∂îÏ≤ú Í≤∞Í≥ºÎäî Ï°∞Í∏à Îí§Ïóê ÌëúÏãú (Îçî ÎÇòÏùÄ UX)
      setTimeout(() => {
        setRecommendations(data.ml_recommendations || []);
        setLoading(false);
      }, 500);
      
    } catch (err) {
      console.error('Recommendation error:', err);
      setError(err instanceof Error ? err.message : 'Ï∂îÏ≤ú ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      setLoading(false);
      setAgentLoading(false);
    }
  };

  const handleFinanceConsult = async (car: CarRecommendation) => {
    setFinanceLoading(true);
    setSelectedCar(car);
    setError('');

    try {
      const response = await fetch(`${API_BASE}/api/finance`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          car_id: car.car_id.toString(),
          user_budget: car.price, // Ï∞®Îüâ Í∞ÄÍ≤©ÏùÑ Í∏∞Î≥∏ ÏòàÏÇ∞ÏúºÎ°ú ÏÇ¨Ïö©
        }),
      });

      if (!response.ok) {
        throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${response.status}`);
      }

      const data: FinanceResponse = await response.json();

      if (data.status === 'error') {
        throw new Error(data.message || 'Í∏àÏúµ ÏÉÅÎã¥ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      }

      setFinanceInfo(data);
    } catch (err) {
      console.error('Finance consultation error:', err);
      setError(err instanceof Error ? err.message : 'Í∏àÏúµ ÏÉÅÎã¥ ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setFinanceLoading(false);
    }
  };

  const handleCompare = (car: CarRecommendation) => {
    if (compareList.find(c => c.car_id === car.car_id)) {
      setCompareList(compareList.filter(c => c.car_id !== car.car_id));
    } else if (compareList.length < 3) {
      setCompareList([...compareList, car]);
    }
  };

  return (
    <Box>
      {/* Enhanced Header */}
      <EnhancedHeader onStartChat={onStartChat} />
      
      <Container maxWidth="lg" sx={{ py: 2 }}>
        {/* Guided Input Panel */}
        <GuidedInputPanel 
          onSubmit={handleRecommendation}
          loading={loading}
        />

      {/* Error Display */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

        {/* Agent Response with Loading */}
        {(agentLoading || agentResponse) && (
          <Paper 
            elevation={2} 
            sx={{ 
              p: 3, 
              mb: 4, 
              background: 'linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%)',
              borderRadius: 3,
            }}
          >
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, color: '#1976d2' }}>
              ü§ñ AI Ï†ÑÎ¨∏Í∞Ä Î∂ÑÏÑù
            </Typography>
            {agentLoading ? (
              <Box>
                <Skeleton variant="text" width="80%" height={32} />
                <Skeleton variant="text" width="60%" height={32} />
                <Skeleton variant="text" width="90%" height={32} />
              </Box>
            ) : (
              <Fade in={!!agentResponse}>
                <Typography variant="body1" sx={{ whiteSpace: 'pre-line', fontSize: '1.05rem', lineHeight: 1.6 }}>
                  {agentResponse}
                </Typography>
              </Fade>
            )}
          </Paper>
        )}

        {/* Car Recommendations with Loading Skeletons */}
        {(loading || recommendations.length > 0) && (
          <Box mb={4}>
            <Typography variant="h5" gutterBottom sx={{ mb: 3, fontWeight: 600, color: '#1976d2' }}>
              üéØ ÎßûÏ∂§ Ï∂îÏ≤ú Ï∞®Îüâ
              {compareList.length > 0 && (
                <Typography component="span" variant="body2" color="textSecondary" sx={{ ml: 2 }}>
                  (ÎπÑÍµê Î™©Î°ù: {compareList.length}/3)
                </Typography>
              )}
            </Typography>
            
            <Grid container spacing={3}>
              {loading ? (
                // Loading Skeletons
                Array.from({ length: 3 }).map((_, index) => (
                  <Grid item xs={12} md={4} key={`skeleton-${index}`}>
                    <Paper sx={{ p: 2, height: 400 }}>
                      <Skeleton variant="circular" width={56} height={56} sx={{ mb: 2 }} />
                      <Skeleton variant="text" width="80%" height={32} />
                      <Skeleton variant="text" width="60%" height={24} />
                      <Skeleton variant="text" width="100%" height={48} sx={{ my: 2 }} />
                      <Skeleton variant="rectangular" width="100%" height={100} />
                    </Paper>
                  </Grid>
                ))
              ) : (
                // Actual Recommendations
                recommendations.map((car, index) => (
                  <Grid item xs={12} md={4} key={car.car_id}>
                    <EnhancedCarCard
                      car={car}
                      index={index}
                      onFinanceConsult={handleFinanceConsult}
                      onCompare={handleCompare}
                      financeLoading={financeLoading && selectedCar?.car_id === car.car_id}
                      isSelected={compareList.find(c => c.car_id === car.car_id) !== undefined}
                    />
                  </Grid>
                ))
              )}
            </Grid>
          </Box>
        )}

      {/* Finance Information */}
      {financeInfo && selectedCar && (
        <Paper elevation={3} sx={{ p: 4 }}>
          <Typography variant="h5" gutterBottom>
            üí≥ {selectedCar.make} {selectedCar.model} Í∏àÏúµ ÏÉÅÎã¥ Í≤∞Í≥º
          </Typography>
          
          {financeInfo.agent_response && (
            <Box mb={3}>
              <Typography variant="h6" gutterBottom>
                Ï†ÑÎ¨∏Í∞Ä Î∂ÑÏÑù
              </Typography>
              <Typography variant="body1" sx={{ whiteSpace: 'pre-line', mb: 2 }}>
                {financeInfo.agent_response}
              </Typography>
              <Divider />
            </Box>
          )}
          
          <Typography variant="h6" gutterBottom>
            Í∏àÏúµ ÏòµÏÖò ÎπÑÍµê
          </Typography>
          
          <Grid container spacing={3}>
            {financeInfo.finance_options.map((option, index) => (
              <Grid item xs={12} md={6} key={index}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="h6" color="primary" gutterBottom>
                      {option.type}
                    </Typography>
                    
                    <Box mb={2}>
                      <Typography variant="body2" color="textSecondary">
                        Ïõî ÎÇ©Î∂ÄÏï°
                      </Typography>
                      <Typography variant="h6">
                        {option.monthly_payment === 0 
                          ? 'ÏóÜÏùå' 
                          : `${option.monthly_payment.toLocaleString()}ÎßåÏõê`}
                      </Typography>
                    </Box>
                    
                    <Box mb={2}>
                      <Typography variant="body2" color="textSecondary">
                        Ï¥ù ÏßÄÍ∏â ÎπÑÏö©
                      </Typography>
                      <Typography variant="h6">
                        {option.total_cost.toLocaleString()}ÎßåÏõê
                      </Typography>
                    </Box>
                    
                    <Box mb={2}>
                      <Typography variant="body2" color="textSecondary">
                        Ï¥àÍ∏∞ ÎÇ©ÏûÖÍ∏à
                      </Typography>
                      <Typography variant="h6">
                        {option.down_payment.toLocaleString()}ÎßåÏõê
                      </Typography>
                    </Box>
                    
                    <Typography variant="body2" color="textSecondary">
                      {option.description}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Paper>
      )}

        {/* Footer */}
        <Box textAlign="center" mt={6} py={3}>
          <Typography variant="body2" color="textSecondary">
            CarFin AI - ÏóîÏπ¥ Ïã§Ï†ú Îß§Î¨º Îç∞Ïù¥ÌÑ∞ √ó CrewAI Î©ÄÌã∞ÏóêÏù¥Ï†ÑÌä∏ √ó PyCaret ML Ï∂îÏ≤ú ÏãúÏä§ÌÖú
          </Typography>
          <Typography variant="caption" color="textSecondary" display="block" mt={1}>
            Powered by OpenAI GPT-4 & Ïã§ÏãúÍ∞Ñ Ï∞®Îüâ Îç∞Ïù¥ÌÑ∞
          </Typography>
        </Box>
      </Container>
    </Box>
  );
};

export default CarRecommendationApp;